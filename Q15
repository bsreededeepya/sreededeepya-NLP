import nltk
from nltk import PCFG
from nltk.parse import ViterbiParser

# Define a simple probabilistic CFG (PCFG)
pcfg_grammar = PCFG.fromstring("""
S -> NP VP [1.0]
VP -> V NP [0.7] | VP PP [0.3]
PP -> P NP [1.0]
NP -> Det N [0.5] | Det N PP [0.3] | 'I' [0.2]
Det -> 'a' [0.6] | 'the' [0.4]
N -> 'man' [0.5] | 'park' [0.3] | 'telescope' [0.2]
V -> 'saw' [1.0]
P -> 'in' [0.6] | 'with' [0.4]
""")

# Create a Viterbi parser for PCFG
viterbi_parser = ViterbiParser(pcfg_grammar)

def parse_sentence(sentence):
    tokens = sentence.lower().split()
    parses = list(viterbi_parser.parse(tokens))
    if not parses:
        print(f"Sentence '{sentence}' cannot be parsed by the PCFG.")
        return
    
    # Show the most probable parse tree and its probability
    best_parse = parses[0]
    print(f"Most probable parse for '{sentence}':")
    print(best_parse)
    print(f"Probability: {best_parse.prob()}")

# Test the PCFG parser
parse_sentence("I saw a man")
parse_sentence("I saw a man with a telescope")
parse_sentence("the man saw the park in the telescope")
